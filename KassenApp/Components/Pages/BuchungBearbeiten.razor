@page "/buchung-bearbeiten/{id:int}"

@inject KassenDbContext dbContext
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3>Buchung bearbeiten</h3>

@if (buchung == null)
{
    <p>Buchung wird geladen</p>
}
else
{
    <form Model="@buchung" onsubmit="Speichern" @formname="EditBuchungForm">
        @* <DataAnnotationsValidator/> *@
        <div class="d-flex align-items-end gap-2 mb-3">
            <!--Kontoart-->
            <div>
                <label for="konto">Kontoart:</label>
                <select id="konto" class="form-control" @bind="buchung.KontoId">
                    <option disabled selected>Bitte wählen...</option>
                    @foreach (var konto in konten)
                    {
                        <option value="@konto.Id">@konto.KontoName</option>
                    }
                </select>
            </div>

            <!--Einnahmen oder Ausgaben-->
            <div>
                <label for="Buchungsart">Buchungsart: </label>
                <select id="art" class="form-control" @bind="buchung.Buchungsart">
                    <option value="@Buchungsart.Einnahme">Einnahme</option>
                    <option value="@Buchungsart.Ausgabe">Ausgabe</option>
                </select>
            </div>
        </div>
        <!--Verwendungszweck-->
        <div class="mb-3">
            <label for="zweck">Verwendungszweck:</label>
            <input type="text" id="zweck" class="form-control" @bind="buchung.Verwendungszweck" required />
        </div>
        <div class="d-flex align-items-end gap-2 mb-3">
            <div class="mb-3">
                <label for="betrag">Betrag in €:</label>
                <input type="number" id="betrag" class="form-control" @bind="buchung.Betrag" step="0.01" required />
            </div>

            <!--Datum-->
            <div class="mb-3">
                <label for="datum">Buchungsdatum:</label>
                <input type="date" id="datum" class="form-control" @bind="buchung.Datum" required />
            </div>
        </div>
        <!--Speichern und Abbrechen-->
        <button type="submit" class="btn btn-success" @onclick="Speichern">💾 Speichern</button>
        <button type="button" class="btn btn-secondary" @onclick="Abbrechen">❌ Abbrechen</button>
    </form>
}


@code {
    [Parameter] public int Id { get; set; }

    private Buchung? buchung;
    private List<Konto> konten;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"DEBUG: ID beim Laden der Seite = {Id}");
        konten = await dbContext.Konten.ToListAsync();
        buchung = await dbContext.Buchungen.FindAsync(Id);

        if (buchung == null)
        {
            Console.WriteLine($"Keine Buchung mit ID {Id} gefunden.");
            Navigation.NavigateTo("/buchungen");
        }
    }

    private async Task Speichern()
    {
        await dbContext.SaveChangesAsync();
        Navigation.NavigateTo("/buchungen", forceLoad: true);
    }

    private void Abbrechen()
    {
        Navigation.NavigateTo("/buchungen", forceLoad: true);
    }
}
